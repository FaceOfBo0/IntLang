# Lexer class
//    public List<Token> tokenize() {
//        // create List of Tokens from Code until end of Stream
//        while (this.curPos < this.source.length()) {
//
//            // handle single-charakter Tokens
//            if (this.source.charAt(curPos) == '=') {
//                if (!(this.source.charAt(readPos) == '='))
//                    tokens.add(new Token(TokenType.ASSIGN, String.valueOf(this.source.charAt(curPos))));
//                else tokens.add(new Token(TokenType.EQUAL, "=="));
//            }
//            else if (Objects.equals(this.source.charAt(0), '-') || Objects.equals(this.source.charAt(0), '+') ||
//                    Objects.equals(this.source.charAt(0), '*') || Objects.equals(this.source.charAt(0), '/'))
//                tokens.add(new Token(TokenType.BINARY, String.valueOf(this.source.charAt(curPos))));
//            else if (Objects.equals(this.source.charAt(0), '('))
//                tokens.add(new Token(TokenType.LPAREN, String.valueOf(this.source.charAt(curPos))));
//            else if (Objects.equals(this.source.charAt(0), ')'))
//                tokens.add(new Token(TokenType.RPAREN, String.valueOf(this.source.charAt(curPos))));
//            else if (Objects.equals(this.source.charAt(0), '{'))
//                tokens.add(new Token(TokenType.LBRACE, String.valueOf(this.source.charAt(curPos))));
//            else if (Objects.equals(this.source.charAt(0), '}'))
//                tokens.add(new Token(TokenType.RBRACE, String.valueOf(this.source.charAt(curPos))));
//            else if (Objects.equals(this.source.charAt(0), ','))
//                tokens.add(new Token(TokenType.COMMA, String.valueOf(this.source.charAt(curPos))));
//            else if (Objects.equals(this.source.charAt(0), ';'))
//                tokens.add(new Token(TokenType.SEMICOL, String.valueOf(this.source.charAt(curPos))));
//
//            // handle multi-charakter Tokens
//            else {
//                // handle NumberToken
//                if (isDigit(String.valueOf(this.source.charAt(0)))) {
//                    StringBuilder numValue = new StringBuilder();
//                    while (!this.source.isEmpty() && isDigit(String.valueOf(this.source.charAt(0)))) {
//                        numValue.append(String.valueOf(this.source.charAt(curPos)));
//                    }
//                    tokens.add(new Token(TokenType.INT, numValue.toString()));
//                }
//
//                // handle IdentifierToken
//                else if (isAlpha(String.valueOf(this.source.charAt(0)))) {
//                    StringBuilder idnValue = new StringBuilder();
//                    while (!this.source.isEmpty() && isAlpha(String.valueOf(this.source.charAt(0)))) {
//                        idnValue.append(String.valueOf(this.source.charAt(curPos)));
//                    }
//                    tokens.add(new Token(keywords.getOrDefault(idnValue.toString(), TokenType.IDENT),
//                            idnValue.toString()));
//                }
//                else tokens.add(new Token(TokenType.ILLEGAL));
//            }
//        }
//        return tokens;
//    }